

■ 2장 퍼셉트론 (Perceptron)

인공지능 --> 머신러닝 --> 딥러닝

   • 머신러닝 ( 컴퓨터가 스스로 학습 하는 알고리즘 ) 의 종류 3가지

   1. 지도 학습 : 정답이 있는 상태에서 학습

   딥러닝

   예 : 개 사진 10000장, 고양이 사진 10000장을 계속 컴퓨터에게 보여주면서 이 사진은 개다
      이 사진은 고양이다 라고 계속 알려주는 것이다.

   2. 비지도 학습 : 정답이 없는 상태에서 학습

   3. 강화 학습 : 보상을 통해서 학습 데이터를 만들며 학습



지도 학습과 강화 학습은 케이크의 크림과 체리에 해당하고 비지도 학습은 케이크의 빵에 해당한다.

겉보기에 화려한 부분은 강화학습인데 실제로 

인공지능 --> 머신러닝 --> 딥러닝
                  ↓
                 퍼셉트론
               
퍼셉트론 ? 인간의 뇌세포중 하나를 컴퓨터로 구현해 봄 ( 뉴런 )

1957년에 프랑크 로젠 블라트가 퍼셉트론 알고리즘을 고안을 했다.

사람의 뇌의 동작을 전기 스위치인 온/오프로 흉내 낼 수 있다는 이론을 증명을 했다.

간단히 말하면 인간의 신경세포 하나를 흉내를 냈는데 

고등학교 생물시간 배운 3가지 용어?

   1. 자극 (stimulus)
   2. 반응 (response)
   3. 역치 (threshold)

" 특정 자극이 있다면 그 자극이 어느 역치 이상이어야지만 세포가 반응한다 "

예 : 짜게 먹는 사람은 자기가 평소에 먹는 만큼 음식이 짜지 않으면 싱겁다고 느낀다.
   ( 역치이하의 자극은 무시)

싱겁게 먹는 사람은 짜게 먹기 시작하면 오랜 시간 지나면 예전에 먹던 싱거운 음식에 만족하지 못한다.(역치가 올라감)

   • 뉴런의 개수
   
      1. 사람 : 850억개
      2. 고양이 : 10억개
      3. 쥐 : 7천5백만개
      4. 바퀴벌레 : 몇백만개
      5. 하루살이 : 지금 현재까지 나온 최첨단 인공지능의 뉴런수 보다 많다. 
   
   
   퍼셉트론 ?
   
   

문제 26. and게이트 퍼셉트론을 구현하기 위해서 입력값과 target그리고 가중치를 아래와 같이 numpy로 만드시오 !

	입력값 : [0, 0], [0, 1], [1, 0] [1, 1]

	Target : [0], [0], [0], [1]

	가중치 : [0.4], [0.35], [0.05] 

	import numpy as np
	inputs = np.array( [ [0, 0], [0, 1], [1, 0], [1, 1] ] )
	target = np.array( [[0], [0], [0], [1]] )
	w = np.array ( [[0.4], [0.35], [0.05]] )
	print(inputs)
	print(target)
	print(w)
	
	[[0 0]
	 [0 1]
	 [1 0]
	 [1 1]]
	[[0]
	 [0]
	 [0]
	 [1]]
	[[ 0.4 ]
	 [ 0.35]
	 [ 0.05]]




문제 27. 아래와 같은 활성화 함수를 생성하시오 !

	def active_function(k):
	    if k > 0:
	        return 0
	    elif k <= 0:
	        return 1    

	print(active_function(-0.2) )
	print(active_function(0.4))
	print(active_function(0))




문제 28. 아래의 numpy array로 만든 입력값(x)와 가중치(w)의 행렬 곱을 구하시오 !

	import numpy as np
	x = np.array( [0,1] )
	w = np.array( [0.5,0.5] )
	
	print(x * w)

	[ 0.   0.5]



문제 29. 위에서 출력된 두개의 원소의 합을 출력하시오 !

	import numpy as np
	x = np.array( [0,1] )
	w = np.array( [0.5,0.5] )
	
	print(np.sum(x*w))

	0.5


문제 30. 아래의 입력값(x)과 가중치(w) 곱의 합을 출력하시오 !

	import numpy as np
	x = np.array( [ [-1, 0, 0], [-1, 0, 1], [-1, 1, 0], [-1, 1, 1] ] )
	target = np.array( [[0], [0], [0], [1]] )
	w = np.array ( [0.4, 0.35, 0.05] )
	x0 = np.array( [-1] )
	
	def and_sum(x,w):
	    xx = x*w
	    return np.round(sum(xx.T),decimals=2)
	    #return np.round(np.sum(xx, axis=1),decimals=2)   # axis=1 : 행 끼리 합을 구할때
							      # axis=0 : 열 끼리 합을 구할때
	print(and_sum(x,w))

	[-0.4  -0.35 -0.05 -0.  ]




문제 32. 위에서 나온 결과를 target값의 차이를 출력하는데 결과가 아래와 같이 출력 되게끔 코드를 작성하시오 !

	import numpy as np
	x = np.array( [ [-1, 0, 0], [-1, 0, 1], [-1, 1, 0], [-1, 1, 1] ] )
	target = np.array( [0, 0, 0, 1] )
	w = np.array ( [0.4, 0.35, 0.05] )
	def active_func(k):
	   if k > 0:
	      return 1
	   else:
	      return 0
	    
	def and_sum(x,w):
	    k_list = np.round( np.sum(x*w, axis=1), decimals=2 )
	    k = [ active_func(i) for i in k_list ]
	    return np.array(k) - target
	
	
	print(and_sum(x,w))




문제 33. 아래의 공식을 대입해서 최적의 가중치인 w0,w1,w2를 출력하게끔 and_sum함수에 코드를 추가하시오 !

	공식 : wi = wi + 0.05 * xi * (target - k)

	import numpy as np
	x = np.array( [ [-1, 0, 0], [-1, 0, 1], [-1, 1, 0], [-1, 1, 1] ] )
	targets = np.array( [[0], [0], [0], [1]] )
	w = np.array ( [0.4, 0.35, 0.05] )
	
	def active_func(k):
	    if k > 0:
	        return 1
	    elif k <= 0:
	        return 0
	    
	def and_sum(x,w):
	    while True:
	        w1 = []
	        k_list = np.sum(x*w, axis=1)
	        for i in range(len(k_list)):
	            k = active_func(k_list[i])
	            if (targets[i][0] - k) != 0:
	                w1 = []
	                for j in range(len(w)):
	                    w1.append(w[j] + 0.05*x[i][j]*(targets[i][0] - k))
	                break
	        if w1 == []:
	            break
	        w = np.array(w1)
	    return w
	
	print(and_sum(x,w))




























